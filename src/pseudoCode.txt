
MVP

1. Display 10 recent posts on first load 

2. User can create a blog post

3. User can view article in full view (moved to stretch goals)


Stretch Goals

-Ability to log in - attach author names to articles - login button changes to Publish button 

-A 'see more articles by this author' button in full article view

-Pagination to browse through all posts in preview mode ten at a time

-Further to the login - user's input is saved in text area even when logging out (useEffect?)

-Like buttons in the recent posts section

-estimated read time shown in preview

-API integration - allow users to set an unsplash image at the head of their post

-useEffect to stop listening for DB changes in RecentPosts.js when unmounting

-ability to dynamically add new text areas or pictures in Publish














App.js -> RecentPosts.js -> PreviewCard.js
       -> FullArticleView.js
       -> Publish.js






Pseudo code

/// App.js


App.js will always return a <header> with an <h1> or logo in the top left of the screen
On page load, App.js returns the RecentPosts.js component. 

useState can be used in App.js to return the appropriate component -> if user clicks on article card then flip a display boolean on FullArticleView.js to true and set RecentPosts.js to false

///RecentPosts.js component


RecentPosts.js makes a call to the database and returns the ten most recent posts, previews of which are then 
displayed by showing preview cards of the ten most recent blog posts in the format of a child component 
 - a map function could return the PreviewCard.js component 10 times, injecting appropriate data

PreviewCard.js -> returns <h2> title <p> intro text <button> read more - the read more button forces App.js to render the FullArticleView.js component

Beside RecentPosts.js is a Publish <button> - it forces App.js to render the Publish.js component - a click handle will change state forcing a re-render to the Publish screen






//// Publish.js component

component returns an input with a placeholder of 'title' and a textarea with a placeholder of 'start bloggin'
a button element will take the title and textarea text and make a database call to post the article to the database
the first 50? characters are saved as preview text to be sent to the RecentPosts.js component
- user is returned to the recent posts 'page' - 


//// FullArticleView.js component

this component should receive the article data in the form of props

a database call will be made by accessing the article info from the props
the full text of the article will be downloaded from the database and then the component will return it in the
form of something like <h2> title   <p> body   <button> Return to home












